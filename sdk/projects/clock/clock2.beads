beads 1 program clock  --  a simple analog clock, drawn with lines
//  a simple analog clock
//  written by edj 2019
//  Copyright and related rights waived

const
	FORCE_TIME = F

const GRAD1 : a_gradient = { grad_shape:LINEAR_GRADIENT, grad_angle:GRAD_TO_BOTTOM, 
		grad_stops:[ { stop_pos:0, stop_color:#839BBB },
				     { stop_pos:49, stop_color:#EDEDF4 },
					 { stop_pos:51, stop_color:#EDEDF4 },
					 { stop_pos:100, stop_color:#9596C5 }] }

var g : a_date	--  the current calendar date, this record defined in std library

===================
calc main_init
	if FORCE_TIME
		g.dt_hour = 9
		g.dt_minute = 10
		g.dt_second = 25
	else
		//  set up a never ending callback to 'do_tick' every second, starting immediately
		timer_start(do_tick, delay:0 sec, interval:1 sec, reps:1000)

===================
calc do_tick -- is called once a second
	merge seconds_to_date(now) ===> g  --  take our local clock in epoch seconds and convert to the date/time in our local city

===================
draw main_draw
	//  fill the screen with a background color
	draw_rect(grad:GRAD1)

	//  calculate the size of the clock box, by taking 80% of the smaller of the total width and height
	var diameter ‚áê 0.8*min(bb.width, bb.height)

	//  calculate a square centered on the screen
	var area : a_rect <=== solve_rect(basis:bb, pin:MID_CENTER, width:diameter, height:diameter, round:T)
	
	//  indent from the total screen size, set coordinate origin at the middle of the box
	layer area:area, origin:5 d_clock(diameter)

===================
draw d_clock(
	diameter
	) -----
	//log "d_clock"
	const C_TICK = #1C342C
	const POS_NUMS = 0.81
	const POS_TICK1 = 0.89
	const POS_TICK2 = 0.94
	const SIZE_NUMS = diameter / 12

	var radius = diameter / 2
	var cx = bb.width/2
	var cy = bb.height/2

	draw_circle( x:0, y:0, fill:#82ACBA, diam:diameter, bord_color:#1C1C34, bord_width:diameter / 70,
		bord_pos:0, shadow:[{dx:radius/15, dy:radius/15, blur:radius/20, color:#1C2D34, opacity:0.75}])

	//  draw the hour numbers and the minute ticks
	loop from:1 to:60 index:tickx
		var theta : Angle = (tickx/60 - 0.25) turn
		var pos1 = POS_TICK1
		var pos2 = POS_TICK2

		if mod(tickx, 5) == 0
			var hourx = tickx /. 5
			var tx = radius*POS_NUMS*cos(theta)
			var ty = radius*POS_NUMS*sin(theta)
			var dx = SIZE_NUMS*0.1 if hourx == 10 else 0
			var r <=== solve_rect(cx:cx+tx+dx, cy:cy+ty, width:SIZE_NUMS*3, height:SIZE_NUMS*1.2)
			draw_str(hourx, size:SIZE_NUMS, color:#1C342C, box:r, just:CENTER, shrink:F)
			//draw_circle(x:tx, y:ty, fill:CRIMSON, diam:6)

			pos1 = 0.91
			pos2 = 0.94

		//  draw a minute tick
		var x1 = radius*pos1*cos(theta)
		var y1 = radius*pos1*sin(theta)
		var x2 = radius*pos2*cos(theta)
		var y2 = radius*pos2*sin(theta)
		draw_line(x1:x1, y1:y1, x2:x2, y2:y2, color:C_TICK) 
	layer area:bb origin:5 d_hands(radius)

draw d_hands (
	radius 
	)
	//log "  d_hands"

	//  stepping hour hand if we use /., otherwise would be sweeping
	draw_line( x1:0, y1:0, color:#232e32, angle:(g.dt_hour + g.dt_minute / 60)*30 - 90 deg, 
		len:radius*0.58, thick:radius / 22)

	//  minute hand
	draw_line( x1:0, y1:0, color:#11515d, angle:(g.dt_minute + g.dt_second / 60)*6 - 90 deg, 
		len:radius*0.75, thick:radius / 25)

	//  second hand (will jump because we only update once per second)
	draw_line( x1:0, y1:0, color:#c7d493, angle:round_down(g.dt_second)*6 - 90 deg, 
		len:radius*0.76, thick:radius / 45)
