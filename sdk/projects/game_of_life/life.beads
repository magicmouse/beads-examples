beads 1 program life title:"Conway's game of life"
//  adapted from Nikos Plugachev Piccolo code
//  written in Beads by CodingFiend Nov 2021

const
	C_BUTT_BACK = DARK_SLATE_BLUE
	C_BUTT_TEXT = AZURE
	C_BUTT_BORD = ROYAL_BLUE

	SCRAMBLE_DENSITY = 30  //  set the probability for scrambled cell

var 
	board nolog : array^2 of yesno  // indexed by col (1-ncol), row (1-nrow)]
	prev  nolog : array^2 of yesno  // previous board
	ncol
	nrow

	g : record	// tracked global state record
		timer : num  //  id of timer when we are running 
		step  : num  //  current step of the game

=============================
calc main_init //  one time initialization of our board
	//  this pattern stabilizes after about 40 frames
	board[3, 1] = Y
	board[3, 2] = Y
	board[3, 3] = Y
	board[2, 3] = Y
	board[1, 2] = Y

	board[23, 1] = Y
	board[21, 2] = Y
	board[20, 3] = Y
	board[20, 4] = Y
	board[20, 5] = Y
	board[21, 5] = Y
	board[22, 5] = Y
	board[23, 5] = Y
	board[24, 5] = Y
	board[25, 4] = Y
	board[25, 2] = Y

=============================
calc calc_next_frame
	inc g.step
	board ===> prev  //  copy the current board to prev

	//  given the previous frame, calc the new frame
	loop from:1 to:ncol index:col
		loop from:1 to:nrow index:row
			var n = count_neighbors(col, row)
			//log "calc cell [{col}, {row}], n={n}"
			if prev[col, row] 
				//  this cell was on, to stay on, must have 2 or 3
				board[col, row] = (n == 2) or (n == 3)
			else
				// only spawn if exactly 3 neighbors
				board[col, row] = (n == 3)

=============================
calc count_neighbors (  // count the 8 neighbor cells
	col
	row
	) : num  // return number of neighbors that are ON
	var n = 0
	loop from:-1 to:+1 index:dx
		loop from:-1 to:+1 index:dy
			if dx <> 0 or dy <> 0  //  loop executes 9 times, skip center cell
				if prev[col+dx, row+dy]
					inc n
	return n

=============================
vert slice main_draw
	under
		//  calculate the number of columns
		const DOTSIZE = 10 pt
		ncol = min(80, round_down(bb.width/DOTSIZE))
		nrow = min(80, round_down((bb.height- 32 pt)/DOTSIZE))
		draw_rect(fill:#224140) 	//  fill the page with a dark color

	add 150 al draw_board
	skip 2 pt
	add 24 pt draw_footer
	skip 2 pt

=============================
grid draw_board  //  draw the playing board
	horz slice
		loop reps:ncol
			add 12 al

	vert slice
		loop reps:nrow
			add 12 al

	under
		draw_rect(fill:#2d5655, corner:2 pt)

	cell
		if board[b.cell]
			//  inset the cell slightly so that we can see the boundary
			var box <=== solve_rect(basis:bb, inset:bb.height/12)
			draw_rect(box:box, fill:#ccf3f3, corner:bb.height*0.2)
-----------
track EV_TAP
	toggle board[b.cell]

==================
horz slice draw_footer  //  draw the controller buttons
	skip 10 al
	skip 8 pt
	add 50 pt on:g.timer <> U
		draw_str("{g.step}", size:0.6, color:C_BUTT_TEXT)
	skip 10 al
	skip 8 pt
	if g.timer == U
		add 80 pt d_butt("Start", do_start)
	else
		add 80 pt d_butt("Stop", do_stop)
	skip 10 al
	skip 8 pt
	add 80 pt d_butt("Random", do_scramble) on:g.timer == U 
	skip 10 al
	skip 8 pt
	add 80 pt d_butt("Clear", do_clear) on:g.timer == U 
	skip 10 al
	skip 8 pt

==================
draw d_butt (  //  simple one-shot button
	prompt : str  // label for button
	action : calc()  // action when clicked
	size = 0.6
	back = C_BUTT_BACK
	)
	//  don't go wider than a certain amount
	var r <=== solve_rect(basis:bb, pin:5, width:min(bb.width, bb.height*8))
	draw_rect(box:r, fill:back, pos:0, thick:1 pt, color:C_BUTT_BORD, corner:4 pt)
	draw_str(prompt, size:size, indent:2 pt, color:C_BUTT_TEXT)
-----------
track EV_TAP
	action()

==================
calc do_clear
	trunc board

==================
calc do_scramble
	trunc board
	loop from:1 to:ncol index:col
		loop from:1 to:nrow index:row
			if random_range(1, 100) <= SCRAMBLE_DENSITY 
				board[col, row] = Y

==================
calc do_start
	//  start a timer to recalc at 4 frames a second
	g.timer = timer_start(calc_next_frame, rate:4, reps:1000)
	g.step = 1

==================
calc do_stop
	timer_clear(id:g.timer)
	g.timer = U
