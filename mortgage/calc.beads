beads 1 program mls title:"Mortgage Calculator"

// assets local:"art/" remote:"art/"
// 	file:"house.jpg" label:ICON_HOUSE
from animate3 import anim_start, anim_stop, anim_resize, mycanvas

const
	C_DEAD = #33545F
	C_BUTT_BACK = MEDIUM_TURQUOISE
	C_BUTT_BORD = #03C189
	C_BUTT_TEXT = BLACK

	C_CARET = TOMATO
	C_HEAD_TEXT = #1C2D34
	C_SUBHEAD_TEXT = WHITE

	C_CALC_DEAD = #1C2D34
	C_CALC_TEXT = WHITE

	C_ENTRY_LO_BACK = #4E7F90 // #72A1B2
	C_ENTRY_LO_BORD = #33605F
	C_ENTRY_TEXT = WHITE

	C_CELL_FILL_LO = C_BUTT_BACK
	C_CELL_BORD_LO = C_BUTT_BORD
	C_CELL_FILL_HI = #FFBB7B
	C_CELL_BORD_HI = #FE5511
	C_CELL_TEXT = BLACK

	C_SUM_BACK = #703D3C

	BUTT_CORNER = 12
	BUTT_THICK = 2

	IN_BORDER = 1
	IN_INDENT = 3

	FONT_HEAD = SERIF
	FONT_BUTT = "Atkinson Hyperlegible"

	DURATIONS : array of num <=== [30, 20, 15, 10, 7]

	BUTT_GRAD1 : a_gradient = { grad_shape:LINEAR_GRADIENT, grad_angle:GRAD_TO_BOTTOM, 
		grad_stops:[ { stop_pos:0, stop_color:MEDIUM_TURQUOISE },
				     { stop_pos:48, stop_color:#8BFEFD },
					 { stop_pos:52, stop_color:#8BFEFD },
					 { stop_pos:100, stop_color:MEDIUM_TURQUOISE }] }

	HEAD_GRAD : a_gradient = { grad_shape:LINEAR_GRADIENT, grad_angle:GRAD_TO_BOTTOM, 
		grad_stops:[ { stop_pos:0, stop_color:SKY_BLUE },
				     { stop_pos:48, stop_color:#D2F4FF },
					 { stop_pos:52, stop_color:#D2F4FF },
					 { stop_pos:100, stop_color:SKY_BLUE }] }

	SUBHEAD_GRAD : a_gradient = { grad_shape:LINEAR_GRADIENT, grad_angle:GRAD_TO_BOTTOM, 
		grad_stops:[ { stop_pos:0, stop_color:BLACK },
				     { stop_pos:48, stop_color:#343560 },
					 { stop_pos:52, stop_color:#343560 },
					 { stop_pos:100, stop_color:BLACK }] }

	HEADER_V = 25
	FORCE_IPHONE = N

style
	IN_STYLE = size:SIZE_INPUT, indent:IN_INDENT pt, just:LEFT, color:C_ENTRY_TEXT, corner:3 pt, 
		border:IN_BORDER pt, border_color:C_ENTRY_LO_BORD, fill:C_ENTRY_LO_BACK, caret:C_CARET

const
	//  measurement constants
	COL0 = 5  // indent
	COL1 = 60
	COL1_TEXT = 0.6
	SIZE_INPUT = 0.65

	COL2 = 90
	RMARG = 10  // right margin to protect scrollbar

	ROW_WEIGHT = 18
	GAP_WEIGHT = 6
	TOT_WEIGHT = ROW_WEIGHT + GAP_WEIGHT

var
	net_row
	net_gap
	
regexp VALID_PRICE starts ends
	1-5 digit

regexp VALID_down_pmt starts ends
	0-3 digit

regexp VALID_HOA starts ends
	0-4 digit

regexp VALID_RATE starts ends
	1-2 digit
	group optional and
		"."
		0-5 digit

var intf : record
	//mode : (MODE_DEV, MODE_HOME, MODE_FIND, MODE_CALC, MODE_TAXREC, MODE_ADD_LIST, MODE_MY_LIST, MODE_LEARN)
	dev  : (DEV_NATIVE, DEV_IPHONE1, DEV_IPHONE2)
	down_method : (BY_AMT, BY_PCT)
	dev_box : a_rect
	dev_dpi
	native_box : a_rect
	nlistings
	err_msg : str

var quote : record
	price 	 //  in K$
	rate     //  in percent
	durationx  // index in DURATIONS[] array
	add_taxes : yesno
	prop_tax  //  in pct, as a percentage of price
	mort_ins  //  in pct, as a percentage of loan amt
	hoa_fees  //  in $/month
	
	//----- derived
	down_pmt   //  down payment in $
	down_pct   //  down payment in %
	loan_amt    //  price minus down payment, in $
	loan_mo
	prop_tax_mo
	home_ins_mo
	pmi_mo
	hoa_mo
	fees_mo  //  sum of prop tax, home_ins, mort_ins
	tot_mo	

var 
	input_price : a_input_field
	input_down_pmt : a_input_field
	input_down_pct : a_input_field
	input_rate : a_input_field
	input_prop_tax : a_input_field
	input_home_ins  : a_input_field
	input_pmi  : a_input_field
	input_hoa  : a_input_field

====================
calc main_init
	quote.durationx = 1
	quote.add_taxes = N
	quote.prop_tax = 1.2
	quote.hoa_fees = 0
	quote.mort_ins = 0

	if FORCE_IPHONE
		set_dev(DEV_IPHONE1)

	intf.nlistings = 0
	intf.down_method = BY_PCT

	input_price.in_label = "price"
	//input_price.in_hint  = "List name"
	//input_price.in_kind = IN_NUMBER   //  IN_NUMBER adds dumb arrows
	input_price.in_keyboard = "numeric"  // 0-9 only 
	input_price.in_tab = 1
	input_price.in_minlen = 1
	input_price.in_maxlen = 5
	input_price.in_required = Y
	input_price.in_on_change = recalc
	input_price.in_pattern = VALID_PRICE
	input_start(input_price)
	input_set_value(input_price, "500")

	input_down_pmt.in_label = "down_pmt"
	input_down_pmt.in_keyboard = "numeric"  // 0-9 only
	input_down_pmt.in_tab = 2
	input_down_pmt.in_minlen = 0
	input_down_pmt.in_maxlen = 3
	//input_down_pmt.in_required = Y  //  a blank entry is legal, will be considered 0
	input_down_pmt.in_on_change = recalc
	input_down_pmt.in_pattern = VALID_down_pmt
	input_start(input_down_pmt)
	input_set_value(input_down_pmt, "25")  // will be changed in first recalc

	input_down_pct.in_label = "down_pct"
	input_down_pct.in_keyboard = "decimal" // 0-9, '.'
	input_down_pct.in_tab = 3
	input_down_pct.in_minlen = 1
	input_down_pct.in_maxlen = 4
	//input_down_pct.in_required = Y
	input_down_pct.in_on_change = recalc
	input_down_pct.in_pattern = VALID_RATE
	input_start(input_down_pct)
	input_set_value(input_down_pct, "10")

	input_rate.in_label = "rate_amt"  //  % per year, not APR
	input_rate.in_keyboard = "decimal"  // 0-9, '.'
	input_rate.in_tab = 4
	input_rate.in_minlen = 1
	input_rate.in_maxlen = 6
	input_rate.in_required = Y
	input_rate.in_on_change = recalc
	input_rate.in_pattern = VALID_RATE
	input_start(input_rate)
	input_set_value(input_rate, "7")

	input_prop_tax.in_label = "prop_tax"  //  insurance as % of price
	input_prop_tax.in_keyboard = "decimal"  // 0-9, '.'
	input_prop_tax.in_tab = 5
	input_prop_tax.in_minlen = 1
	input_prop_tax.in_maxlen = 5
	input_prop_tax.in_required = N
	input_prop_tax.in_on_change = recalc
	input_prop_tax.in_pattern = VALID_RATE
	input_start(input_prop_tax)
	input_set_value(input_prop_tax, "1.25")

	input_home_ins.in_label = "home_ins"  //  insurance as % of price
	input_home_ins.in_keyboard = "decimal"  // 0-9, '.'
	input_home_ins.in_tab = 6
	input_home_ins.in_minlen = 1
	input_home_ins.in_maxlen = 5
	input_home_ins.in_required = N
	input_home_ins.in_on_change = recalc
	input_home_ins.in_pattern = VALID_RATE
	input_start(input_home_ins)
	input_set_value(input_home_ins, "0.6")

	input_pmi.in_label = "priv_mort_ins"  //  insurance as % of price
	input_pmi.in_keyboard = "decimal"  // 0-9, '.'
	input_pmi.in_tab = 7
	input_pmi.in_minlen = 1
	input_pmi.in_maxlen = 5
	input_pmi.in_required = N
	input_pmi.in_on_change = recalc
	input_pmi.in_pattern = VALID_RATE
	input_start(input_pmi)
	input_set_value(input_pmi, "0")

	input_hoa.in_label = "hoa_fees"  //  $/month
	input_hoa.in_keyboard = "numeric" 
	input_hoa.in_tab = 8
	input_hoa.in_minlen = 1
	input_hoa.in_maxlen = 4
	input_hoa.in_required = N
	input_hoa.in_on_change = recalc
	input_hoa.in_pattern = VALID_HOA
	input_start(input_hoa)
	input_set_value(input_hoa, "0")

	recalc

	//  we can't get invisible until there is a click first
// 	if runtime.os_kind == OS_AND or runtime.os_kind == OS_IOS
// 		browser_nav_vis(N)		

	anim_start
		
====================
calc recalc  //  recalculate the mortgage
	
	log "price_ok={input_price.in_ok}, down_ok={input_down_pmt.in_ok}"
	if input_price.in_ok and input_rate.in_ok
		quote.price = to_num(input_price.in_value)*1000
		quote.rate = to_num(input_rate.in_value)

		if intf.down_method == BY_PCT
			//  user entered percent
			if input_down_pct.in_ok 
				quote.down_pct = to_num(input_down_pct.in_value)
				quote.down_pmt = quote.price*quote.down_pct/100
				input_set_value(input_down_pmt, to_str(quote.down_pmt/1000))
			else
				bad_inputs(msg:"⚠️ Down payment bad")
				return
		else
			//  user entered dollar amt, calculate the percent
			if input_down_pmt.in_ok
				quote.down_pmt = to_num(input_down_pmt.in_value)*1000
				quote.down_pct = round(100*quote.down_pmt / quote.price, multiple:0.1)  
				input_set_value(input_down_pct, to_str(quote.down_pct, dig:3))
			else
				bad_inputs(msg:"⚠️ Down payment bad")
				return

		//  if the down payment is greater than the price, error
		if quote.down_pmt >= quote.price
			bad_inputs(msg:"⚠️ Down payment greater than price")
			return

		//  do the loan calculation
		quote.loan_amt = (quote.price - quote.down_pmt)
		var nmonths = DURATIONS[quote.durationx]*12
		var monthly_rate = quote.rate/12
		quote.loan_mo = loan_payment(quote.loan_amt, monthly_rate, nmonths)

		//  now sum the fees
		if quote.add_taxes
			//  calculate property tax
			if input_prop_tax.in_ok
				quote.prop_tax_mo = quote.price * to_num(input_prop_tax.in_value) / 1200
				log "prop tax = {quote.prop_tax_mo}"
			else
				bad_inputs
				return

			if input_home_ins.in_ok
				quote.home_ins_mo = quote.price * to_num(input_home_ins.in_value) / 1200
				log "home ins = {quote.home_ins_mo}"
			else
				bad_inputs
				return
		
			if input_pmi.in_ok
				quote.pmi_mo = quote.price * to_num(input_pmi.in_value) / 1200
				log "pmi = {quote.pmi_mo}"
			else
				bad_inputs
				return
		
			if input_hoa.in_ok
				quote.hoa_mo = to_num(input_hoa.in_value)
			else
				bad_inputs
				return

			//  final total
			quote.fees_mo = quote.prop_tax_mo + quote.home_ins_mo + quote.pmi_mo + quote.hoa_mo
		else
			quote.fees_mo = 0

		// grand total
		quote.tot_mo = quote.loan_mo + quote.fees_mo

	else
		//  leave derived U
		bad_inputs

	log "recalc price={quote.price}, loan_mo={quote.loan_mo}"

====================
calc bad_inputs (
	msg : str = "⚠️ Bad or missing input"
	)
	intf.err_msg = msg
	quote.loan_mo = U
	quote.fees_mo = U
	quote.tot_mo = U

====================
horz slice main_draw
	under
		layer area:bb canvas:mycanvas

	//block fill:GRAY9

	var leftover = bb.width - 350 pt
	var part1 = leftover /. 2
	var part2 = leftover - part1

// 	if FORCE_IPHONE
// 		totbox <=== solve_rect(basis:bb, pin:5, width:intf.dev_box.width, height:intf.dev_box.height)
// 	else
// 		totbox <=== bb
// 	layer area:totbox dpi:intf.dev_dpi d_dev_picker

	skip part1 px 
	add 10 al d_calc
	skip part2 px
--------------------
track EV_RESIZE
	anim_resize
	//  we get this event first before draw
	if intf.dev_dpi == U
		//  first run
		intf.dev_box <=== bb
		intf.native_box <=== bb
		intf.dev_dpi = runtime.screen_dpi
		log "EV_RESIZE, bbox={bb}, dpi={intf.dev_dpi}"

====================
vert slice d_dev_picker
	skip 10 pt
	add 30 pt d_dev("iPhone 14+ @75%", set_dev(DEV_IPHONE1))
	skip 10 pt
	add 30 pt d_dev("iPhone 14+ @100%", set_dev(DEV_IPHONE2))
	skip 10 pt
	add 30 pt d_dev("Desktop", set_dev(DEV_NATIVE))

====================
calc set_dev (
	newdev
	)
	case newdev
	| DEV_NATIVE
		intf.dev_box <=== intf.native_box
		intf.dev_dpi = U

	| DEV_IPHONE1
		//  iphone 14 plus viewport is 428 x 926, pixel ratio 3
		//  at 75%  
		var ratio = 0.75
		intf.dev_box <=== solve_rect(left:0, top:0, width:414*ratio, height:896*ratio)
		intf.dev_dpi = 72*3*ratio

	| DEV_IPHONE2
		//  iphone 14 plus viewport is 428 x 926, pixel ratio 3
		//  at 100%  
		intf.dev_box <=== solve_rect(left:0, top:0, width:428, height:926)
		intf.dev_dpi = 72*3

	log "device box={intf.dev_box}, dpi={intf.dev_dpi}"

====================
horz slice d_dev (
	label : str
	action : calc(frozen) 
	)
	skip 10 al
	add 140 pt d_butt_action(label, action)
	skip 10 al

====================
vert slice d_calc
	block fill:C_CALC_DEAD

	add HEADER_V pt d_sub_header("Mortgage Calculator")
	add 10 al d_calc2

====================
vert scroll d_calc2  // main calculator display
	under
		//  calculate the row height
		const NROWS = 13 if quote.add_taxes else 9
		var rowv = min(28 pt, bb.height / NROWS)
		net_row = round(rowv*ROW_WEIGHT/TOT_WEIGHT)
		var leftover = bb.height - NROWS*net_row
		net_gap = round(min(14 pt, leftover/(NROWS+1)))

		var icon <=== solve_rect(basis:bb, pin:3, height:net_row+net_gap*2, width:bb.width/3)
		draw_str("🏠", box:icon, size:0.75)

	skip net_gap px
	add net_row px dc_price
	skip net_gap px
	add net_row px dc_down
	skip net_gap px
	add net_row px dc_rate
	skip net_gap px
	add net_row px dc_duration
	skip net_gap px
	add net_row px dc_tog_tax
	if quote.add_taxes
		skip net_gap px
		add net_row px dc_prop_tax
		skip net_gap px
		add net_row px dc_home_ins
		skip net_gap px
		add net_row px dc_pmi
		skip net_gap px
		add net_row px dc_hoa	
		skip net_gap px
		add (net_gap*1.5 + net_row*4) px d_full_sum
	else
		//  just show loan total
		skip net_gap px
		add (net_gap*1 + net_row*2) px d_simple_sum
	add net_gap px d_nothing

draw d_nothing
	nop

====================
vert slice d_simple_sum
	block fill:C_SUM_BACK, corner:4 pt

	if quote.tot_mo == U
		//  an error somewhere
		add 10 al draw_str(intf.err_msg, wrap:Y, indent:8 pt, size:12 pt, color:WHITE)
	else
		skip (net_gap*0.5) px
		add net_row px net_down
		add net_row px net_loan(Y)

====================
vert slice d_full_sum
	block fill:C_SUM_BACK, corner:4 pt

	if quote.tot_mo == U
		//  an error somewhere
		add 10 al draw_str(intf.err_msg, wrap:Y, indent:8 pt, size:12 pt, color:WHITE)
	else
		skip (net_gap*0.5) px
		add net_row px net_down
		add net_row px net_loan(N)
		add net_row px net_fees
		add net_row px net_total

====================
draw d_divider
	var r <=== solve_rect(basis:bb, pin:2, left:COL0 pt, width:100 pt)
	draw_rect(box:r, fill:GRAY2, corner:1 pt)

====================
horz slice dc_price
	//block fill:random_color()
	skip COL0 pt
	add 30 pt draw_str("Price", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 1 pt
	add 10 pt draw_str("$", size:COL1_TEXT, color:C_CALC_TEXT, just:RIGHT)
	skip 2 pt
	add 40 pt draw_input(input_price, s:IN_STYLE)
	skip 2 pt
	add 15 pt draw_str("k", size:COL1_TEXT, color:C_CALC_TEXT, just:LEFT, font:FONT_BUTT)
	skip RMARG pt
	
====================
horz slice dc_down
	skip COL0 pt
	add 30 pt draw_str("Down", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 2 pt
	add 60 pt d_down_method
	skip 10 pt
	if intf.down_method == BY_PCT
		//  user is entering %, $ is calculated
		add 38 pt draw_input(input_down_pct, s:IN_STYLE)
		skip 2 pt
		add 10 pt  draw_str("%", size:COL1_TEXT, color:C_CALC_TEXT, just:LEFT)
		skip 2 pt
		add 40 pt draw_str("({to_str(quote.down_pmt/1000, dig:1, u_cc:"")} k)", size:COL1_TEXT, just:RIGHT, color:C_CALC_TEXT)
	else
		//  user is entering $, % is calculated
// 		add 10 pt  draw_str("$", size:COL1_TEXT, color:C_CALC_TEXT, just:RIGHT)
// 		skip 2 pt
		add 38 pt draw_input(input_down_pmt, s:IN_STYLE)
		skip 2 pt
		add 10 pt  draw_str("k", size:COL1_TEXT, color:C_CALC_TEXT, just:LEFT)
		skip 2 pt
		add 40 pt draw_str("({to_str(quote.down_pct, dig:3, u_cc:"")} %)", size:COL1_TEXT, just:RIGHT, color:C_CALC_TEXT)
	skip RMARG pt

====================
horz slice d_down_method
	add 10 al d_butt_method('%', BY_PCT)
	skip 2 al
	add 10 al d_butt_method('$', BY_AMT)

====================
draw d_butt_method (  //  method button
	label : str
	val : num
	)
	if intf.down_method == val
		draw_rect(fill:C_CELL_FILL_HI, color:C_CELL_BORD_HI, thick:1 pt, pos:0, corner:4 pt)
	else
		draw_rect(fill:C_CELL_FILL_LO, color:C_CELL_BORD_LO, thick:1 pt, pos:0, corner:4 pt)
	draw_str(label, size:0.7, color:C_CELL_TEXT, indent:1 pt, bold:Y)  // font:FONT_BUTT, 
--------
track EV_TAP
	intf.down_method = val

====================
horz slice dc_rate
	skip COL0 pt
	add 30 pt draw_str("Rate", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 13 pt
	add 35 pt draw_input(input_rate, s:IN_STYLE)
	skip 2 pt
	add 10 pt  draw_str("%", size:COL1_TEXT, color:C_CALC_TEXT, just:LEFT)
	skip 12 pt
	//  tried <span style='display:inline-block; transform:rotate(90deg);'>➜</span>
	add 24 pt d_rate_tweak("\u2212", -0.1)
	skip 12 pt 
	add 24 pt d_rate_tweak("+", +0.1)
	skip RMARG pt
	
====================
draw d_rate_tweak (
	label : str
	delta
	)
	block fill:C_CELL_FILL_LO corner:4 pt
	draw_str(label, size:0.7, color:GRAY9, bold:Y)
-----
track EV_TAP
	if input_rate.in_ok
		var rate = to_num(input_rate.in_value)
		delta +=> rate
		input_set_value(input_rate, to_str(rate, dig:3))
		recalc
	
====================
horz slice dc_duration
	skip COL0 pt
	add 40 pt draw_str("Years", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 3 pt
	add 10 al max:200 d_duration_grid
	skip RMARG pt

====================
const 
	FEE_INDENT = 12
	FEE_H = 70

horz slice dc_prop_tax
	//block fill:random_color()
	skip FEE_INDENT pt
	add FEE_H pt draw_str("Prop. Tax", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 2 pt
	add 40 pt draw_input(input_prop_tax, size:SIZE_INPUT, indent:IN_INDENT pt, just:LEFT, color:C_ENTRY_TEXT, corner:3 pt,
		border:IN_BORDER pt, border_color:C_ENTRY_LO_BORD, fill:C_ENTRY_LO_BACK)
	skip 2 pt
	add 10 pt draw_str("%", size:COL1_TEXT, color:C_CALC_TEXT, just:LEFT)
	skip 10 pt
	skip RMARG pt

====================
horz slice dc_home_ins
	//block fill:random_color()
	skip FEE_INDENT pt
	add FEE_H pt draw_str("Home Insur.", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 2 pt
	add 40 pt draw_input(input_home_ins, size:SIZE_INPUT, indent:IN_INDENT pt, just:LEFT, color:C_ENTRY_TEXT, corner:3 pt,
		border:IN_BORDER pt, border_color:C_ENTRY_LO_BORD, fill:C_ENTRY_LO_BACK)
	skip 2 pt
	add 10 pt draw_str("%", size:COL1_TEXT, color:C_CALC_TEXT, just:LEFT)
	skip 10 pt
	skip RMARG pt

====================
horz slice dc_pmi
	//block fill:random_color()
	skip FEE_INDENT pt
	add FEE_H pt draw_str("Priv. Mort. Ins.", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 2 pt
	add 40 pt draw_input(input_pmi, size:SIZE_INPUT, indent:IN_INDENT pt, just:LEFT, color:C_ENTRY_TEXT, corner:3 pt,
		border:IN_BORDER pt, border_color:C_ENTRY_LO_BORD, fill:C_ENTRY_LO_BACK)
	skip 2 pt
	add 10 pt draw_str("%", size:COL1_TEXT, color:C_CALC_TEXT, just:LEFT)
	skip 10 pt
	skip RMARG pt

====================
horz slice dc_hoa
	//block fill:random_color()
	skip FEE_INDENT pt
	add FEE_H pt draw_str("HOA fees", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 2 pt
	add 40 pt draw_input(input_hoa, size:SIZE_INPUT, indent:IN_INDENT pt, just:LEFT, color:C_ENTRY_TEXT, corner:3 pt,
		border:IN_BORDER pt, border_color:C_ENTRY_LO_BORD, fill:C_ENTRY_LO_BACK)
	skip 2 pt
	add 20 pt draw_str("/mo", size:COL1_TEXT, color:C_CALC_TEXT, just:LEFT)
	skip RMARG pt

====================
horz slice d_duration_grid
	loop across:DURATIONS count:cx
		if cx > 1
			skip 1 pt
		add 10 al duration_cell(cx)

====================
draw duration_cell (
	cellx
	)
	if cellx == quote.durationx
		draw_rect(fill:C_CELL_FILL_HI, color:C_CELL_BORD_HI, thick:1 pt, pos:0, corner:4 pt)
	else
		draw_rect(fill:C_CELL_FILL_LO, color:C_CELL_BORD_LO, thick:1 pt, pos:0, corner:4 pt)
	draw_str(DURATIONS[cellx], size:0.6, color:C_CELL_TEXT, indent:1 pt, bold:Y)  // font:FONT_BUTT, 
-------
track EV_TAP
	quote.durationx = cellx
	recalc

====================
horz slice dc_tog_tax
	skip 12 pt
	add bb.height px d_checkbox(quote.add_taxes, do_toggle_taxes)
	skip 4 pt
	add 10 al max:120 draw_str("Add taxes & fees", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip RMARG pt

====================
// draw d_tool_icon (
// 	action : calc(frozen)
// 	)
// 	draw_str("⚙️", size:0.85)
// ------
// track EV_TAP
// 	action()

====================
calc do_tools
	log "set taxes"

====================
draw d_checkbox (
	val : yesno
	action : calc(frozen)
	)
	if val
		draw_rect(fill:C_CELL_FILL_HI, color:C_CELL_BORD_HI, thick:1 pt, corner:2 pt, pos:0)
		draw_str("✔️", color:C_CELL_TEXT, size:0.65)
	else
		draw_rect(fill:C_ENTRY_LO_BACK, color:C_ENTRY_LO_BORD, thick:1 pt, corner:2 pt)
------
track EV_TAP
	action()

====================
calc do_toggle_taxes
	toggle quote.add_taxes
	recalc

const NET_H = 75

====================
horz slice net_down
	skip COL0 pt
	add NET_H pt draw_str("Down", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 2 pt
	add 60 al draw_str("$ {to_str(quote.down_pmt/1000, dig:0, thou:Y)} k", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT)
	skip RMARG pt

====================
horz slice net_loan (
	hilite : yesno
	)
	under	
		if hilite
			draw_row_hilite
	skip COL0 pt
	add NET_H pt draw_str("Mortgage", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 2 pt
	var suffix = " /mo" if hilite else ""
	add 60 al draw_str("$ {to_str(quote.loan_mo, dig:0, thou:Y)}{suffix}", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT)
	skip RMARG pt

====================
draw draw_row_hilite
	var r <=== solve_rect(basis:bb, pin:4, left:(COL0+55+5) pt, width:85 pt)
	draw_rect(box:r, fill:#FF5F9C, opacity:0.3, corner:4 pt)
	
====================
horz slice net_fees
	skip COL0 pt
	add NET_H pt draw_str("Taxes & fees", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 2 pt
	add 60 al draw_str("$ {to_str(quote.fees_mo, dig:0, thou:Y)}", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT)
	skip RMARG pt
	
====================
horz slice net_total
	under
		draw_row_hilite
	skip COL0 pt
	add NET_H pt draw_str("Total", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT, font:FONT_BUTT)
	skip 2 pt
	add 60 al draw_str("$ {to_str(quote.tot_mo, dig:0, thou:Y)} /mo", just:LEFT, size:COL1_TEXT, color:C_CALC_TEXT)
	skip RMARG pt
	
====================
horz slice d_sub_header (
	msg : str
	)
	block grad:SUBHEAD_GRAD
	skip 1 al min:2
	add 10 al draw_str(msg, size:0.6, color:C_SUBHEAD_TEXT, font:FONT_BUTT)
	skip 1 al min:2
	
// ====================
// draw d_back_butt
// 	var r <=== solve_rect(basis:bb, pin:5, inset:4 pt)
// 	draw_rect(box:r, grad:BUTT_GRAD1, corner:BUTT_CORNER, thick:BUTT_THICK pt, color:C_BUTT_BORD)
// 	draw_str("⬅ Back", size:0.50, color:C_BUTT_TEXT, font:FONT_BUTT)
// ------
// track EV_TAP
// 	set_mode(MODE_HOME)
// 
====================
draw d_butt_action (
	msg : str
	action : calc(frozen)
	just : num = CENTER
	)
	draw_rect(grad:BUTT_GRAD1, corner:BUTT_CORNER, thick:BUTT_THICK pt, color:C_BUTT_BORD)
	if just == CENTER
		draw_str(msg, size:0.5, color:C_BUTT_TEXT, font:FONT_BUTT)
	else
		draw_str(msg, size:0.5, just:LEFT, indent:bb.width/14, color:C_BUTT_TEXT, font:FONT_BUTT)
------
track EV_TAP
	action()

====================
calc loan_payment (
	amt   -- amount of loan
	rate  -- interest rate in percent per period
	nperiods -- number of periods
	) : num  --- amount per period
	//  formula is P * (r(1+r)^N) / ((1+R)^N - 1)
	var r = rate*0.01
	//log "calc r={to_str(r, dig:3)}, amt={amt}, nperiods={nperiods}"
	return amt* (r*(1+r)^nperiods) / ((1+r)^nperiods - 1)