beads 1 program demo_client

from remote demo_serv import SERV_PORT, MYSTERY, a_person, serv_add_user

record a_intf
	mode : (MODE_BOOT, MODE_LIST, MODE_DETAIL)
	connected : yesno
	banner : str
	errmsg : str  // err msg for input field

// 
// record a_person*
// 	name : str  // login name
// 	msgs : array of str

const
	TRACE_FLAG = Y

	HOST = "localhost"

	//  colors
	C_DEAD = LINEN
	C_TEXT = #1C2D34
	C_BUTT_BACK = MEDIUM_TURQUOISE
	C_BUTT_BORD = #03C189
	C_BUTT_TEXT = BLACK
	C_BUTT_SHAD = WHITE // PALE_TURQUOISE  // drop shadow of button
	C_BUTT_BORD_HI = #7602A6
	C_CARET = TOMATO

	C_ENTRY_BACK = #CFDEE3
	C_ENTRY_BORD = BLUE // DARK_SLATE_GRAY
	C_ENTRY_TEXT = BLACK

	BUTT_CORNER = 4
	BUTT_THICK = 2
	ENTRYBORD = 1

	BUTT_GRAD1 : a_gradient = { grad_shape:LINEAR_GRADIENT, grad_angle:GRAD_TO_BOTTOM, 
		grad_stops:[ { stop_pos:0, stop_color:MEDIUM_TURQUOISE },
				     { stop_pos:48, stop_color:#8BFEFD },
					 { stop_pos:52, stop_color:#8BFEFD },
					 { stop_pos:100, stop_color:MEDIUM_TURQUOISE }] }

style
	S_TEXT = size:0.7, just:LEFT, indent:8 pt, color:C_TEXT
	S_BUTT_TEXT = color:C_BUTT_TEXT, opacity:opacity
	S_MSG_INPUT = size:12 pt, indent:2 pt, corner:2 pt, caret:C_CARET,
		color:C_ENTRY_TEXT, border:ENTRYBORD pt, border_color:C_ENTRY_BORD, fill:C_ENTRY_BACK

var
	intf : a_intf  //  user interface state
	people : array of a_person  // subscribed data
	chan1 : a_client_conn  // socket connection record
	i_newname : a_input_field
	
======================
calc main_init
	intf.mode = MODE_BOOT
	intf.banner = "Contacting server..."
	intf.errmsg = ""

	i_newname.in_label = "newname"
	i_newname.in_hint  = ""
	i_newname.in_tab = 1
	i_newname.in_minlen = 1
	i_newname.in_maxlen = 20
	i_newname.in_required = N
	i_newname.in_tip = "New user name"
	i_newname.in_validator = validate_name
	input_start(i_newname)

	subscribe_start(chan1, HOST, SERV_PORT, MYSTERY, adr people, echo:Y, handler:subscribe_handler) 

calc validate_name (
	field : a_input_field
	) : yesno
	if people[field.in_value].name <> U
		//  this name in use
		intf.errmsg = "Name already in use"
		return N
	intf.errmsg = ""
	return Y

=====================
calc subscribe_handler (  // callback for subscription
	sock : object
	cstatus :num
	)
	log "subscribe_handler, status={cstatus}, mode={intf.mode}" on:TRACE_FLAG
	case cstatus
	| CSTATUS_DATA 
		if intf.connected <> Y
			//  we just logged in, first time we got data
			log "-- first data" on:TRACE_FLAG
			intf.connected = Y
			set_mode(MODE_LIST)

	| CSTATUS_NO_ANSWER
		intf.banner = "Server not responding"
		intf.connected = N
		set_mode(MODE_BOOT)

	| CSTATUS_CLOSED
		intf.connected = N
		intf.banner = "Connection to server dropped"
		set_mode(MODE_BOOT)

====================
calc set_mode (
	newmode 
	)
	intf.mode = newmode

======================
draw main_draw
	case intf.mode
	| MODE_BOOT
		draw_boot
	| MODE_LIST
		draw_list
	| MODE_DETAIL
		draw_detail
	else
		draw_err

======================
draw draw_err
	block fill:RED
	draw_str("Bad mode", size:20 pt)

======================
draw draw_boot
	block fill:C_DEAD
	draw_str(intf.banner, size:24 pt, color:GRAY9)

======================
vert scroll draw_list
	block fill:C_DEAD
	
	skip 4 pt
	add 16 pt draw_str("Users", s:S_TEXT, bold:Y)
	skip 4 pt
	var p : ptr to a_person
	loop across:people ptr:p sort:field name
		add 14 pt draw_str(p.name, s:S_TEXT)

	skip 10 pt
	add 16 pt draw_str("Add User", s:S_TEXT, bold:Y)
	skip 4 pt
	add 20 pt d_add_user
	skip 4 pt
	add 14 pt draw_str(intf.errmsg, s:S_TEXT)

======================
vert scroll draw_detail
	block fill:C_DEAD
	draw_str ("Detail", size:20 pt, color:BLACK)

======================
horz slice d_add_user
	skip 4 pt
	add 110 pt draw_input(i_newname, s:S_MSG_INPUT)
	skip 4 pt
	//  we only allow the ADD button to be visible when entry field is valid
	add 40 pt d_button("Add", do_add_user) on:i_newname.in_ok

calc do_add_user
	serv_add_user(i_newname.in_value) via chan1
	//  clear out the old entry value
	input_set_value(i_newname, "")

====================
vert slice d_button (
	msg : str  // label of button
	action : calc(frozen)
	just : num = CENTER
	hilite : yesno = N
	vindent : num = 0  // number of points indent above and below
	opacity : num = 1
	)
	skip vindent pt
	add 10 al d_button2(msg, just, hilite, opacity)
	skip vindent pt
------
track EV_TAP
	//  if the opacity is dimmed, it means button is disabled
	if opacity == 1
		action()

====================
draw d_button2 (
	msg : str
	just
	hilite : yesno
	opacity
	)
	//var grad = BUTT_HI_GRAD1 if hilite else BUTT_GRAD1
	var c_bord = C_BUTT_BORD_HI if hilite else C_BUTT_BORD
	draw_rect(grad:BUTT_GRAD1, corner:BUTT_CORNER, thick:BUTT_THICK pt, color:c_bord, pos:0, opacity:opacity)
	if just == CENTER
		draw_str(msg, size:0.55, indent:1.5 pt, s:S_BUTT_TEXT, html:Y)
	else
		draw_str(msg, size:0.55, just:LEFT, indent:bb.width/14, s:S_BUTT_TEXT, html:Y)


