beads 1 program tree
//  this is a clone of the python program from Engineer-man on youtube:
//  https://github.com/engineer-man/youtube/tree/master/089
//  https://www.youtube.com/watch?time_continue=280&v=lbbNoCFSBV4&feature=emb_logo
//  beads length: 200 words

const 
	//  define the tree as a multiline string. we don't want backslash to function as an escape seq
	//  so we use the special syntax to suppress escape characters.
	TREE = """
           Y
          YYY
          /_\
         /_R_\
        /_/_/_\
        /_\G\_\
       /_R_/_B_\
       /_\_B_\_\
      /_/G/_/R/_\
      /_\_\_B_\_\
     /_G_/_/_/_/_\
     /_\R\_\_B_G_\
    /_/_/_/_/_/_/_\
    /_\_\_\R\_\_\_\
   /_/R/_/_/_/_/R/_\
   /_\_G_\_\_B_\_\_\
  /_/_/_/_B_/_/_G_/_\
         [___]"""

	NH = 21  // max width of tree in chars
	NV = 18  // height of tree in rows
	BIG_DOT = "\u2B24"  // unicode circle 2b24 is very large
	STAR = "\u2B50"  // unicode star character  ⭐

	DARK_GRAD : a_gradient = { grad_shape:LINEAR_GRADIENT, grad_angle:GRAD_TO_RIGHT, 
		//  gradients are a two dimensional array of [percent, color, opacity]
		//  make a 4 band gradient at 0, 46, 54, and 100% of the way
		grad_stops:[ { stop_pos:0, stop_color:BLACK },
				     { stop_pos:46, stop_color:MIDNIGHT_BLUE },
					 { stop_pos:54, stop_color:MIDNIGHT_BLUE },
					 { stop_pos:100, stop_color:BLACK }] }

record a_bulb
	nticks  // how many ticks left in the current state
	is_lit : yesno  // is the bulb lit?
	color_on  : color
	color_off : color

var
	bulbs : array of a_bulb 

===================
calc main_init
===================
	//  set up our initial state of the bulb blinking timers
	{ nticks:8, is_lit:Y, color_on:RED, color_off:MAROON } ===> bulbs['R']
	{ nticks:8, is_lit:Y, color_on:LIME_GREEN, color_off:DARK_GREEN } ===> bulbs['G']
	{ nticks:8, is_lit:Y, color_on:DODGER_BLUE, color_off:BLUE } ===> bulbs['B']

	//  set up a timer to change the state of the bulbs. stop it after a while
	loom_timer(blink_bulbs, rate:12, delay:0.3 sec, reps:10000)

===================
calc blink_bulbs
===================
	//  timer callback function, decrement the counters for each bulb kind
	loop across:bulbs ptr:bulb
		//  decrement the tick counter
		//log "check_bulb color={bulb.color_on}, nticks={bulb.nticks}"
		dec bulb.nticks
		if bulb.nticks <= 0
			//  change the state of the bulbs. 
			//  The deductive system in the runtime will redraw the screen automatically
			toggle bulb.is_lit //  time to switch

			//  generate a new random duration for this state
			//  leave it on a little longer when on, versus off
			bulb.nticks = if bulb.is_lit then random_int(10, 20) else random_int(2, 8)

//  these will be set whenever the screen window changes
var CELL_V
var CELL_H

===================
draw main_draw
===================
	//  draw a dark background with a vertical gradient which looks nicer than a solid
	draw_rect(grad:DARK_GRAD)

	//  we can assume that the vertical dimension is our limiting factor
	//  figure out how big each cell of the tree can be to fit on the screen
	CELL_V = round_down(bb.height*0.85 / NV)
	CELL_H = round(CELL_V*0.6)

	//  now calculate the total space we need, and we will center it on the screen
	var r : a_rect <=== solve_rect(basis:bb, pin:5, width:CELL_H*NH, height:CELL_V*NV)
	layer area:r main_draw2

draw main_draw2
	var x = 0
	var y = 0
	var size
	var color : color

	loop from:1 to:str_len(TREE) index:ix  // loop through the tree string
		var cc = subset(TREE, from:ix, len:1)  // extract a single character
		case cc
		| "Y"
			//  draw a star
			color = GOLD
			cc = STAR
			size = 0.5
		| "R", "G", "B"
			//  draw lightbulb
			color = if bulbs[cc].is_lit then bulbs[cc].color_on else bulbs[cc].color_off
			cc = BIG_DOT
			size = 0.6
		else
			color = FOREST_GREEN
			size = 0.8

		//  draw this part of the tree;  ignore \n and blank which are dead space
		if cc > " "
			//  calculate the bounding box of the current cell
			var box <=== solve_rect(left:x*CELL_H, top:y*CELL_V, width:CELL_H, height:CELL_V)
			draw_str(cc, box:box, size:CELL_V*size, shrink:N, color:color, font:"_typewriter")

		//  update our XY coordinate
		if cc == "\n"
			//  go to next row
			inc y
			x = 0
		else
			//  go to next column
			inc x
