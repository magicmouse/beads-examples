beads 1 program temperature2  // a simple fullness indicator control

//  see original CSS code at https://codepen.io/MarkBoots/pen/qBpgvJR
//  this is a version of the code pen but done in Beads, and made interactive
//  it shows the great difference in approach of the declarative vs. imperative style
//  the CSS code is somewhat baffing, as it does many subtle things, and super easy to make a mistake
//  written by CodingFiend May 2022

const
	TRACING = N // during debugging we turn this on
	N_ADJUSTABLE = 2  // how many tubes are adjustable

	C_DEAD = #c2c9cf  //  light gray

	GLASS_GRAD : a_gradient = { grad_shape:LINEAR_GRADIENT, grad_angle:GRAD_TO_RIGHT, 
		grad_stops:[ { stop_pos:0, stop_color:BLACK, opacity:0.1 },
				     { stop_pos:10, stop_color:WHITE, opacity:0 },
				     { stop_pos:15, stop_color:WHITE, opacity:0 },
					 { stop_pos:20, stop_color:WHITE, opacity:0.5 },
				     { stop_pos:50, stop_color:WHITE, opacity:0 },
				     { stop_pos:90, stop_color:WHITE, opacity:0 },
					 { stop_pos:100, stop_color:BLACK, opacity:0.125 }] }

	SHADOW_GRAD : a_gradient = { grad_shape:LINEAR_GRADIENT, grad_angle:GRAD_TO_RIGHT, 
		grad_stops:[ { stop_pos:0, stop_color:BLACK, opacity:0 },
					 { stop_pos:100, stop_color:BLACK, opacity:0.5 }] }

record a_tube
	c_liquid : color
	fullness : num  //  height from 0..1
	phase    : Angle //  angle offset for sine function
	----- transient variables used for tracking
	thumb_y  
	thumb_top
	thumb_bot
	
var
	tubes : array of a_tube <=== [<
		fullness   phase    c_liquid
		0.10	0 deg		#e7b409
		0.10	10 deg		#E96413
		0.50	30 deg		#ec1241
		0.75	40 deg		#af1b76
		1		9 deg		#a541ac  
		>]

	tube_ctl : record  // transient values related to tracking the mouse and varying the data
		sine_angle  : Angle  // angle so we can vary values
		tracking_tx : num  //  which tube are we tracking?
		
		//  transient values used during tracking of the thumb
		drag_starty : num  //  Y coordinate of of where drag started
		drag_startf : num  //  fullness when we started the drag

==========================
calc main_init
	tube_ctl.sine_angle = 0 deg
	loom_timer(update_tubes, reps:200, interval:0.3 sec)
	
==========================
calc update_tubes
	log "update tubes" on:TRACING
	15 deg +=> tube_ctl.sine_angle 
	loop across:tubes index:tx
		if tx <= N_ADJUSTABLE
			continue
		//  this is one of the automatic tracked variables
		tubes[tx].fullness = abs(sin(tube_ctl.sine_angle + tubes[tx].phase))
		log "  tube[{tx}]={tubes[tx].fullness}" on:TRACING

==========================
vert slice main_draw
	background fill:C_DEAD
	skip 14 pt
	add 30 pt draw_str("Tubes", size:0.75, bold:Y, font:"Poppins, sans-serif")
	skip 14 pt
	add 10 al d_tubes
	skip 2 al
	skip 44 pt

==========================
horz slice d_tubes
	skip 30 al
	loop across:tubes index:tx
		if tx > 1
			skip 3 al
		if tx <= N_ADJUSTABLE
			//  only put a thumb for the first tube
			add 35 pt order:99 d_tube_thumb(tx)  //  note: must draw this after the tube!
		else
			skip 35 pt

		skip 2 pt	
		add 8 al d_tube(tx)
	skip 30 al

==========================
//  the bounding box is the same size as the entire tube, including the base
draw d_tube_thumb (
	tx
	)
	//var range_r <=== solve_rect(basis:bb, top:tubes[tx].thumb_top, bottom:tubes[tx].thumb_bot)
	//draw_rect(box:range_r, fill:GREEN, opacity:0.3)

	//  draw the triangle that has the Y coordinate equal to the center Y location of the fill ellipse
	var r <=== solve_rect(left:bb.left, width:bb.width, cy:tubes[tx].thumb_y, height:30 pt)
	
	var t_right:array of a_xy = [ {x:r.left,y:r.top}, {x:r.left,y:r.top+r.height}, {x:r.left+r.width,y:r.top+r.height*0.5}]
	var c_arrow : color = MEDIUM_VIOLET_RED if tube_ctl.tracking_tx == tx else MEDIUM_SEA_GREEN
	draw_polygon(t_right, fill:c_arrow)
-------------
track
	log "tracking evkind={e.evkind}" on:TRACING
	case e.evkind
	| EV_DRAG_BEGIN
		tube_ctl.drag_starty = e.global_y
		tube_ctl.drag_startf = tubes[tx].fullness
		tube_ctl.tracking_tx = tx
		cursor_set(CURS_HAND)

	| EV_DRAG_MOVE
		//  calculate the new fullness based on the mouse
		var delta_mouse = tube_ctl.drag_starty - e.global_y  //  moving downward will be negative

		//  use a gear reduction so that it takes 3 pixels to move 2 pixel of height so it is very precise.
		var tot_range = tubes[tx].thumb_bot - tubes[tx].thumb_top
		var delta = (delta_mouse/1.5)/tot_range  // how much we moved relative to start

		//  in the units we are moving, adjust the temperature change, relative to the 
		//  starting temp in the units we are using, such that the entire range of movement
		//  will yield a change equal to the difference between top and bot temp in that unit
		var newval = clamp(0, tube_ctl.drag_startf + delta, 1)

		log "delta_mouse={delta_mouse}, range={tot_range}, delta={delta}, newval={to_str(newval, dig:2)}" on:TRACING
		tubes[tx].fullness = newval
		return Y
		
	| EV_DRAG_END
		cursor_set(CURS_ARROW)
		tube_ctl.tracking_tx = U

	else
		//  wrong kind of event, don't absorb
		return N

	//  absorb the event
	return Y

==========================
draw d_tube (	
	tx : num // which tube index
	)
	const ELLIPSE_RAD = bb.width / 8
	const ELLIPSE_DIA = ELLIPSE_RAD*2

	//  calc the portion for the base
	const BASE_V = 60 pt
	const LIQUID_V = bb.height - BASE_V

	var tube_r : a_rect <=== solve_rect(basis:bb, pin:2, height:LIQUID_V)
	var base_r : a_rect <=== solve_rect(basis:bb, pin:8, height:BASE_V+(20 pt)-1)
	const elliptical_corners <=== [base_r.width/2, ELLIPSE_RAD]

	//  draw the blurred shadow ellipse first
	var shadow_r <=== solve_rect(left:-bb.width/4, top:bb.height-ELLIPSE_RAD, width:bb.width, height:ELLIPSE_DIA)
	draw_oval(box:shadow_r, fill:BLACK, opacity:0.25, blur:4)

	//  tube base, elliptical bottom
	var textc : color <=== color_tweak_hsv(tubes[tx].c_liquid, 0, 0, -20)
	draw_rect(box:base_r, fill:WHITE, corner:elliptical_corners)
	draw_str("{round(tubes[tx].fullness*100)}%", box:base_r, color:textc, size:0.3, bold:Y, vert:0.65, opacity:0.85)
	draw_rect(box:base_r, grad:SHADOW_GRAD, corner:elliptical_corners)

	//  tube top hole
	var tube_top <=== solve_rect(basis:tube_r, pin:2, height:ELLIPSE_DIA)
	draw_oval(box:tube_top, fill:C_DEAD)
	draw_oval(box:tube_top, thick:0.5 pt, color:BLACK, opacity:0.2) // , grad:GLASS_GRAD, 

	//  calc liquid bounds.  drawn as a rect with an elliptical bottom
	var liquid_top = tube_r.top
	var liquid_bot = liquid_top + LIQUID_V
	var liquid_y = interpolate(tubes[tx].fullness, 0, 1, liquid_bot-ELLIPSE_DIA, liquid_top)
	var liquid_r <=== solve_rect(basis:tube_r, bottom:liquid_bot, top:liquid_y)

	tubes[tx].thumb_y = liquid_y + ELLIPSE_RAD // so it matches the edge
	tubes[tx].thumb_top = liquid_top + ELLIPSE_RAD
	tubes[tx].thumb_bot = liquid_bot - ELLIPSE_RAD

	//  draw the base ellipse
	var base_oval <=== solve_rect(basis:tube_r, pin:8, height:ELLIPSE_DIA)
	draw_oval(box:base_oval, fill:tubes[tx].c_liquid, opacity:0.15)
	draw_oval(box:base_oval, thick:0.5 pt, color:BLACK, opacity:0.2)

	//  do another reflection gradient on the filled portion of the tube
	//draw_rect(box:fill_r, grad:GLASS_GRAD)

	//  fill the tube with the liquid color, fill_r might be zero height
	draw_rect(box:liquid_r, fill:tubes[tx].c_liquid, opacity:0.85, corner:elliptical_corners)

	//  tube glass
	//var glass_box <=== solve_rect(basis:tube_r, pin:2, top:tube_r.top+ELLIPSE_DIA)
	draw_rect(box:tube_r, grad:GLASS_GRAD, corner:elliptical_corners)

	// the top of liquid oval
	var top_oval <=== solve_rect(basis:liquid_r, pin:2, height:ELLIPSE_DIA)
	draw_oval(box:top_oval, thick:0.5 pt, color:BLACK, opacity:0.3)
